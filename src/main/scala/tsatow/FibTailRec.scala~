package tsatow

object FibTailRec {

  @annotation.tailrec
  def eval(stack: List[Either[Int, Int]]): List[Either[Int, Int]] = stack match {
    case Left(i1) :: Left(i2)    :: rest  => eval(Left(i1 + i2) :: rest)
    case Left(i)  :: (r@Right(_)) :: rest => r :: (Left(i) :: rest) // 呼出元で木を取り出しやすいよう入れ替え
    case _                                => stack
  }

  def fib(n: Int): Int = {
    @annotation.tailrec
    def fibTailRec(n: Int, stack: List[Either[Int,  Int]]): Int = n match {
      case 0 | 1 => eval(Left(1) :: stack) match {
        case Right(n) :: rest => fibTailRec(n, rest)
        case Left(f) :: _     => f
        case Nil              => 1
      }
      case _     => fibTailRec(n - 2, Right(n - 1) :: stack)
    }
    fibTailRec(n, Nil)
  }

}
